{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Empresa MicroService Cloud Formation Template",

  "Parameters": {
    
    "AppName": {
      "Type": "String",
      "Description": "The Name of the Application",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a url compatible."
    },
    "ServiceName": {
      "Type": "String",
      "Description": "The Name of the Microservice",
      "Default": "Empresa",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a url compatible."
    },
    "FunctionBucket": {
      "Type": "String",
      "Default": "app-scaffold-templates",
      "Description": "Bucket Name were are stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    },
    "FunctionKey": {
      "Type": "String",
      "Default": "app-scaffold-templates",
      "Description": "Bucket Name were are stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    }
  },

  "Resources": {

    "ServiceTableName": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": ["-", [{
            "Ref": "AppName"
          }, "empresa"]]
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "KeySchema": [{
          "AttributeName": "empresaId",
          "KeyType": "HASH"
        }],
        "AttributeDefinitions": [{
          "AttributeName": "empresaId",
          "AttributeType": "S"
        }]
      }
    },

    "MainFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "FunctionBucket"
          },
          "S3Key": {
            "Ref": "FunctionKey"
          }
        },
        "Description": {
          "Fn::Join": ["", [{
            "Ref": "AppName"
          }, {
            "Ref": "ServiceName"
          }, "-Main Function"]]
        },
        "Handler": "main.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["MainFunctionExecutionRole", "Arn"]
        },
        "Environment": {
          "Variables": {
            "DYNAMO_TABLE": {
              "Ref": "ServiceTableName"
            }
          }
        },
        "Runtime": "nodejs8.10",
        "Timeout": 10
      }
    },

    "MainFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": {
                  "Fn::GetAtt": ["ServiceTableName", "Arn"]
                },
                "Action": [
                  "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan",
                  "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem"
                ]
              },
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": ["logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
              }
            ]
          }
        }]
      }
    },

    "GatewayInvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": ["MainFunction", "Arn"]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["", ["arn:aws:execute-api:", {
            "Ref": "AWS::Region"
          }, ":", {
            "Ref": "AWS::AccountId"
          }, ":", {
            "Ref": "AppRestApi"
          }, "/*"]]
        }
      }
    },

    "AppRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "A test API",
        "Name": "MyRestAPI",
        "FailOnWarnings": true
      }
    },

    "ApiResourceEmpresas": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "AppRestApi"
        },
        "ParentId": {
          "Fn::GetAtt": ["AppRestApi", "RootResourceId"]
        },
        "PathPart": "empresa"
      }
    },

    "ApiResourceEmpresa": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "AppRestApi"
        },
        "ParentId": {
          "Ref": "ApiResourceEmpresas"
        },
        "PathPart": "{empresaId}"
      }
    },

    "ApiResourceEmpresaRequest": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "GET",
          "Uri": {
            "Fn::Join": ["",
              ["arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["MainFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        },

        "RequestParameters": {
          "method.request.path.empresaId": true
        },
        "ResourceId": {
          "Ref": "ApiResourceEmpresa"
        },
        "RestApiId": {
          "Ref": "AppRestApi"
        }
      }
    }

  },

  "Outputs": {

    "TableName": {
      "Value": {
        "Ref": "ServiceTableName"
      },
      "Description": "DynamoDB Table Name"
    }

  }

}