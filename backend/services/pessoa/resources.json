{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Pessoa MicroService Cloud Formation Template",

  "Parameters": {
    
    "AppName": {
      "Type": "String",
      "Description": "The Name of the Application",
      "AllowedPattern": "(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)",
      "ConstraintDescription": "must be a url compatible."
    },
    "FunctionBucket": {
      "Type": "String",
      "Default": "app-scaffold-templates",
      "Description": "Bucket Name were are stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    },
    "FunctionKey": {
      "Type": "String",
      "Description": "Object Key were is stored the source code of Lambda Functions. Must be in the same region were Cloud Formation is being executed!"
    },

    "AppRestAPI": {
      "Type": "String",
      "Description": "API Gateway Rest API Definition"
    },

    "AppRestAPIRootResource": {
      "Type": "String",
      "Description": "API Gateway Rest API Root Resource"
    },

    "AppBaseUrl": {
      "Type": "String",
      "Description": "Define the base url for the application"
    }

  },

  "Resources": {

    "ServiceTableName": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Join": ["-", [{ "Ref": "AppName" }, "Pessoa"]]
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "KeySchema": [{
          "AttributeName": "itemId",
          "KeyType": "HASH"
        }],
        "AttributeDefinitions": [{
          "AttributeName": "itemId",
          "AttributeType": "S"
        }]
      }
    },

    "MainFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": { "Ref": "FunctionBucket" },
          "S3Key": { "Ref": "FunctionKey" }
        },
        "FunctionName" : { "Fn::Join": ["", [{ "Ref": "AppName" }, "-Pessoa-MainFunction"]] },
        "Description": { "Fn::Join": ["", [{ "Ref": "AppName" }, "-Pessoa-MainFunction"]] },
        "Handler": "main.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": ["MainFunctionExecutionRole", "Arn"]
        },
        "Environment": {
          "Variables": {
            "DYNAMO_TABLE": { "Ref": "ServiceTableName" },
            "BASE_URL": { "Ref": "AppBaseUrl" }
          }
        },
        "Runtime": "nodejs8.10",
        "Timeout": 10
      }
    },

    "MainFunctionExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Resource": { "Fn::GetAtt": ["ServiceTableName", "Arn"] },
                "Action": [
                  "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan",
                  "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem",
                  "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem" ]
              },
              {
                "Effect": "Allow",
                "Resource": "*",
                "Action": ["logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
              }
            ]
          }
        }]
      }
    },

    "GatewayInvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": { "Fn::GetAtt": ["MainFunction", "Arn"] },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": ["", ["arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "AppRestAPI" }, "/*"]]
        }
      }
    },

    "ApiResourcePessoas": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "AppRestAPI" },
        "ParentId": { "Ref": "AppRestAPIRootResource" },
        "PathPart": "pessoa"
      }
    },

    "ApiResourcePessoa": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "AppRestAPI" },
        "ParentId": { "Ref": "ApiResourcePessoas" },
        "PathPart": "{pessoaId}"
      }
    },

    "ApiResourcePessoaGET": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourcePessoa" },
        "RequestParameters": { "method.request.path.pessoaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "ApiResourcePessoaPOST": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourcePessoas" },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "ApiResourcePessoaPUT": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourcePessoa" },
        "RequestParameters": { "method.request.path.pessoaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    },

    "ApiResourcePessoaDELETE": {
      "DependsOn": "GatewayInvokeLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      
      "Properties": {

        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "RestApiId": { "Ref": "AppRestAPI" },
        "ResourceId": { "Ref": "ApiResourcePessoa" },
        "RequestParameters": { "method.request.path.pessoaId": true },
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
        }

      }
    }

  },

  "Outputs": {

    "TableName": {
      "Value": { "Ref": "ServiceTableName" },
      "Description": "DynamoDB Table Name"
    }

  }

}